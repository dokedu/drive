// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: file.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const fileCreate = `-- name: FileCreate :one
INSERT INTO files (name, mime_type, file_size, parent_id, organisation_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
`

type FileCreateParams struct {
	Name           string      `db:"name" json:"name"`
	MimeType       string      `db:"mime_type" json:"mime_type"`
	FileSize       int64       `db:"file_size" json:"file_size"`
	ParentID       pgtype.Text `db:"parent_id" json:"parent_id"`
	OrganisationID string      `db:"organisation_id" json:"organisation_id"`
}

func (q *Queries) FileCreate(ctx context.Context, arg FileCreateParams) (File, error) {
	row := q.db.QueryRow(ctx, fileCreate,
		arg.Name,
		arg.MimeType,
		arg.FileSize,
		arg.ParentID,
		arg.OrganisationID,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.FileSize,
		&i.ParentID,
		&i.IsFolder,
		&i.SharedDrive,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fileCreateFolder = `-- name: FileCreateFolder :one
INSERT INTO files (name, mime_type, file_size, is_folder, organisation_id)
VALUES ($1, 'directory', 0,  true, $2)
RETURNING id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
`

type FileCreateFolderParams struct {
	Name           string `db:"name" json:"name"`
	OrganisationID string `db:"organisation_id" json:"organisation_id"`
}

func (q *Queries) FileCreateFolder(ctx context.Context, arg FileCreateFolderParams) (File, error) {
	row := q.db.QueryRow(ctx, fileCreateFolder, arg.Name, arg.OrganisationID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.FileSize,
		&i.ParentID,
		&i.IsFolder,
		&i.SharedDrive,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fileFindAll = `-- name: FileFindAll :many
SELECT id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
FROM files
WHERE deleted_at IS NULL
  AND parent_id IS NULL
  AND shared_drive IS FALSE
  AND organisation_id = $1
  AND deleted_at IS NULL
ORDER BY is_folder DESC, name
`

func (q *Queries) FileFindAll(ctx context.Context, organisationID string) ([]File, error) {
	rows, err := q.db.Query(ctx, fileFindAll, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MimeType,
			&i.FileSize,
			&i.ParentID,
			&i.IsFolder,
			&i.SharedDrive,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fileFindByID = `-- name: FileFindByID :one
SELECT id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
FROM files
WHERE id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
`

type FileFindByIDParams struct {
	ID             string `db:"id" json:"id"`
	OrganisationID string `db:"organisation_id" json:"organisation_id"`
}

func (q *Queries) FileFindByID(ctx context.Context, arg FileFindByIDParams) (File, error) {
	row := q.db.QueryRow(ctx, fileFindByID, arg.ID, arg.OrganisationID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.FileSize,
		&i.ParentID,
		&i.IsFolder,
		&i.SharedDrive,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fileFindByParentID = `-- name: FileFindByParentID :many
SELECT id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
FROM files
WHERE parent_id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
ORDER BY is_folder, name
`

type FileFindByParentIDParams struct {
	ParentID       pgtype.Text `db:"parent_id" json:"parent_id"`
	OrganisationID string      `db:"organisation_id" json:"organisation_id"`
}

func (q *Queries) FileFindByParentID(ctx context.Context, arg FileFindByParentIDParams) ([]File, error) {
	rows, err := q.db.Query(ctx, fileFindByParentID, arg.ParentID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MimeType,
			&i.FileSize,
			&i.ParentID,
			&i.IsFolder,
			&i.SharedDrive,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fileFindSharedDrives = `-- name: FileFindSharedDrives :many
SELECT id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
FROM files
WHERE shared_drive IS TRUE
  AND organisation_id = $1
  AND deleted_at IS NULL
ORDER BY is_folder, name
`

func (q *Queries) FileFindSharedDrives(ctx context.Context, organisationID string) ([]File, error) {
	rows, err := q.db.Query(ctx, fileFindSharedDrives, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MimeType,
			&i.FileSize,
			&i.ParentID,
			&i.IsFolder,
			&i.SharedDrive,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fileFindTrashed = `-- name: FileFindTrashed :many
SELECT id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
FROM files
WHERE deleted_at IS NOT NULL AND organisation_id = $1
`

func (q *Queries) FileFindTrashed(ctx context.Context, organisationID string) ([]File, error) {
	rows, err := q.db.Query(ctx, fileFindTrashed, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MimeType,
			&i.FileSize,
			&i.ParentID,
			&i.IsFolder,
			&i.SharedDrive,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fileSoftDelete = `-- name: FileSoftDelete :exec
UPDATE files
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) FileSoftDelete(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, fileSoftDelete, id)
	return err
}

const fileUpdateName = `-- name: FileUpdateName :one
UPDATE files
SET name = $1
WHERE id = $2 AND organisation_id = $3 AND deleted_at IS NULL
RETURNING id, name, mime_type, file_size, parent_id, is_folder, shared_drive, organisation_id, created_at, deleted_at
`

type FileUpdateNameParams struct {
	Name           string `db:"name" json:"name"`
	ID             string `db:"id" json:"id"`
	OrganisationID string `db:"organisation_id" json:"organisation_id"`
}

func (q *Queries) FileUpdateName(ctx context.Context, arg FileUpdateNameParams) (File, error) {
	row := q.db.QueryRow(ctx, fileUpdateName, arg.Name, arg.ID, arg.OrganisationID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.FileSize,
		&i.ParentID,
		&i.IsFolder,
		&i.SharedDrive,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
