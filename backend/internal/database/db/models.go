// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type PermissionRole string

const (
	PermissionRoleViewer  PermissionRole = "viewer"
	PermissionRoleManager PermissionRole = "manager"
)

func (e *PermissionRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PermissionRole(s)
	case string:
		*e = PermissionRole(s)
	default:
		return fmt.Errorf("unsupported scan type for PermissionRole: %T", src)
	}
	return nil
}

type NullPermissionRole struct {
	PermissionRole PermissionRole `json:"permission_role"`
	Valid          bool           `json:"valid"` // Valid is true if PermissionRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPermissionRole) Scan(value interface{}) error {
	if value == nil {
		ns.PermissionRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PermissionRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPermissionRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PermissionRole), nil
}

type PermissionType string

const (
	PermissionTypeUser   PermissionType = "user"
	PermissionTypeGroup  PermissionType = "group"
	PermissionTypeDomain PermissionType = "domain"
	PermissionTypeAnyone PermissionType = "anyone"
)

func (e *PermissionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PermissionType(s)
	case string:
		*e = PermissionType(s)
	default:
		return fmt.Errorf("unsupported scan type for PermissionType: %T", src)
	}
	return nil
}

type NullPermissionType struct {
	PermissionType PermissionType `json:"permission_type"`
	Valid          bool           `json:"valid"` // Valid is true if PermissionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPermissionType) Scan(value interface{}) error {
	if value == nil {
		ns.PermissionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PermissionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPermissionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PermissionType), nil
}

type UserRole string

const (
	UserRoleOwner UserRole = "owner"
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type File struct {
	ID             string             `db:"id" json:"id"`
	Name           string             `db:"name" json:"name"`
	MimeType       string             `db:"mime_type" json:"mime_type"`
	FileSize       int64              `db:"file_size" json:"file_size"`
	ParentID       pgtype.Text        `db:"parent_id" json:"parent_id"`
	IsFolder       bool               `db:"is_folder" json:"is_folder"`
	SharedDrive    bool               `db:"shared_drive" json:"shared_drive"`
	OrganisationID string             `db:"organisation_id" json:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at" json:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type FilePermission struct {
	ID             pgtype.Text        `db:"id" json:"id"`
	FileID         string             `db:"file_id" json:"file_id"`
	UserID         pgtype.Text        `db:"user_id" json:"user_id"`
	EmailAddress   pgtype.Text        `db:"email_address" json:"email_address"`
	PermissionType PermissionType     `db:"permission_type" json:"permission_type"`
	PermissionRole PermissionRole     `db:"permission_role" json:"permission_role"`
	CreatedAt      time.Time          `db:"created_at" json:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Organisation struct {
	ID                   string             `db:"id" json:"id"`
	Name                 string             `db:"name" json:"name"`
	StripeCustomerID     pgtype.Text        `db:"stripe_customer_id" json:"stripe_customer_id"`
	StripeSubscriptionID pgtype.Text        `db:"stripe_subscription_id" json:"stripe_subscription_id"`
	CreatedAt            time.Time          `db:"created_at" json:"created_at"`
	DeletedAt            pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Session struct {
	ID        string             `db:"id" json:"id"`
	UserID    string             `db:"user_id" json:"user_id"`
	Token     string             `db:"token" json:"token"`
	CreatedAt time.Time          `db:"created_at" json:"created_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type User struct {
	ID             string             `db:"id" json:"id"`
	Role           UserRole           `db:"role" json:"role"`
	OrganisationID string             `db:"organisation_id" json:"organisation_id"`
	FirstName      string             `db:"first_name" json:"first_name"`
	LastName       string             `db:"last_name" json:"last_name"`
	Email          string             `db:"email" json:"email"`
	Password       pgtype.Text        `db:"password" json:"password"`
	RecoveryToken  pgtype.Text        `db:"recovery_token" json:"recovery_token"`
	RecoverySentAt pgtype.Timestamptz `db:"recovery_sent_at" json:"recovery_sent_at"`
	AvatarFileID   pgtype.Text        `db:"avatar_file_id" json:"avatar_file_id"`
	CreatedAt      time.Time          `db:"created_at" json:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}
