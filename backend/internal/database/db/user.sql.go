// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const userFind = `-- name: UserFind :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at
FROM users
WHERE id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
`

type UserFindParams struct {
	ID             string `db:"id" json:"id"`
	OrganisationID string `db:"organisation_id" json:"organisation_id"`
}

func (q *Queries) UserFind(ctx context.Context, arg UserFindParams) (User, error) {
	row := q.db.QueryRow(ctx, userFind, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userFindByEmail = `-- name: UserFindByEmail :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at
FROM users
WHERE email = $1
  AND deleted_at IS NULL
`

func (q *Queries) UserFindByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, userFindByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
