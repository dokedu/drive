// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganisation = `-- name: CreateOrganisation :one
INSERT INTO organisations (name) VALUES ($1) RETURNING id, name, stripe_customer_id, stripe_subscription_id, created_at, deleted_at
`

func (q *Queries) CreateOrganisation(ctx context.Context, name string) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrganisation, name)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, first_name, last_name, organisation_id, role) VALUES ($1, $2, $3, $4, $5) RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at
`

type CreateUserParams struct {
	Email          string   `db:"email" json:"email"`
	FirstName      string   `db:"first_name" json:"first_name"`
	LastName       string   `db:"last_name" json:"last_name"`
	OrganisationID string   `db:"organisation_id" json:"organisation_id"`
	Role           UserRole `db:"role" json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.OrganisationID,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const organisationFindByName = `-- name: OrganisationFindByName :one
SELECT id, name, stripe_customer_id, stripe_subscription_id, created_at, deleted_at
FROM organisations
WHERE name = $1
  AND deleted_at IS NULL
`

func (q *Queries) OrganisationFindByName(ctx context.Context, name string) (Organisation, error) {
	row := q.db.QueryRow(ctx, organisationFindByName, name)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const resetUserConfirmationToken = `-- name: ResetUserConfirmationToken :one
UPDATE users
SET recovery_token = NULL
AND recovery_sent_at = NULL
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at
`

func (q *Queries) ResetUserConfirmationToken(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, resetUserConfirmationToken, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserConfirmationToken = `-- name: UpdateUserConfirmationToken :one
UPDATE users
SET recovery_token = $1
AND recovery_sent_at = $2
WHERE id = $3
  AND deleted_at IS NULL
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at
`

type UpdateUserConfirmationTokenParams struct {
	RecoveryToken  pgtype.Text        `db:"recovery_token" json:"recovery_token"`
	RecoverySentAt pgtype.Timestamptz `db:"recovery_sent_at" json:"recovery_sent_at"`
	ID             string             `db:"id" json:"id"`
}

func (q *Queries) UpdateUserConfirmationToken(ctx context.Context, arg UpdateUserConfirmationTokenParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserConfirmationToken, arg.RecoveryToken, arg.RecoverySentAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userFind = `-- name: UserFind :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at
FROM users
WHERE id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
`

type UserFindParams struct {
	ID             string `db:"id" json:"id"`
	OrganisationID string `db:"organisation_id" json:"organisation_id"`
}

func (q *Queries) UserFind(ctx context.Context, arg UserFindParams) (User, error) {
	row := q.db.QueryRow(ctx, userFind, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userFindByEmail = `-- name: UserFindByEmail :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at
FROM users
WHERE email = $1
  AND deleted_at IS NULL
`

func (q *Queries) UserFindByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, userFindByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
